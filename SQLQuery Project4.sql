SELECT*
FROM customer_shopping_data

	
	--CHANGING THE 'invoice_date' COLUMN FROM CHARACTER STRING DATA TYPE TO A DATE DATA TYPE

--FIRST... REMOVE ALL TRAILING SPACES IN THE ROWS OF THE COLUMN 

UPDATE customer_shopping_data
SET invoice_date = LTRIM(RTRIM(invoice_date))

--THEN CREATING A NEW COLUMN TO CARRY THE NEW DATE

ALTER TABLE customer_shopping_data
ADD Date_of_invoice DATE

--POPULATING THE NEW DATE COLUMN 

UPDATE customer_shopping_data
SET Date_of_invoice = CONVERT(DATE, invoice_date, 103);

	SELECT Date_of_invoice
FROM customer_shopping_data

--PUTTING THE YEAR AND MONTH OF THE DATE IN SEPERATE COLUMNS
ALTER TABLE customer_shopping_data
ADD Month VARCHAR(10)

UPDATE customer_shopping_data
SET Month = FORMAT(Date_of_invoice, 'MMM');


ALTER TABLE customer_shopping_data
ADD Year INT

UPDATE customer_shopping_data
SET Year = YEAR(Date_of_invoice)



--CHECKING FOR THE TOTAL REVENUE GENERATED FROM ALL THE SALES OVER THE YEARS

SELECT ROUND(SUM(price),2) AS Total_Revenue 
FROM customer_shopping_data

--AVERAGE QUANTITY OF ITEMS PURCHASED PER TRANSACTION

SELECT ROUND(AVG(quantity),2) AS Avg_quantity_per_Transaction
FROM customer_shopping_data

--CHECKING FOR THE CATEGORY WITH THE HIGHEST REVENUE GENERATED

SELECT category, ROUND(SUM(price),2) AS Revenue_generated
FROM customer_shopping_data
GROUP BY category
ORDER BY Revenue_generated DESC

--TOTAL REVENUE GENERATED BY DIFERENT SHOPPING MALLS

SELECT shopping_mall, ROUND(SUM(price),2) AS Total_revenue
FROM customer_shopping_data
GROUP BY shopping_mall
ORDER BY Total_revenue DESC

--HOW MANY TRANSACTIONS WERE PAID WITH CASH VS CREDIT CARD?

SELECT payment_method, COUNT(invoice_no) No_of_transactions
FROM customer_shopping_data
GROUP BY payment_method

--HOW DOES REVENUE VARY BY MONTH AND YEAR?
SELECT Month, Year, ROUND(SUM(price),2) AS Revenue
FROM customer_shopping_data
GROUP BY Month, Year
ORDER BY Year

--REVENUE GROWTH OVER TIME (MONTH-ON-MONTH OR YEAR-ON-YEAR)

--YEAR-ON-YEAR REVENUE GROWTH;

WITH Yearly_growth AS 
   (SELECT Year, ROUND(SUM(price),2) AS Total_revenue
       FROM customer_shopping_data
	   GROUP BY Year),
Revenue_growth AS 
    (SELECT Year, Total_revenue,
	   LAG(Total_revenue) OVER
	   (ORDER BY Year) AS Prev_Yr_Revenue
	FROM Yearly_growth)
	SELECT Year, Total_revenue, Prev_Yr_Revenue,
	     CASE WHEN Prev_Yr_Revenue IS NOT NULL THEN ROUND(((Total_revenue - Prev_Yr_Revenue)*100)/Prev_Yr_Revenue,2)
		 ELSE NULL 
	END AS Percentage_change
FROM Revenue_growth
ORDER BY Year

--MONTH-ON-MONTH REVENUE GROWTH;

WITH Monthly_growth AS 
   (SELECT FORMAT(Date_of_invoice, 'yyyy-MM') AS Month, ROUND(SUM(price),2) AS Total_revenue
       FROM customer_shopping_data
	   GROUP BY  FORMAT(Date_of_invoice, 'yyyy-MM')),
Revenue_growth AS 
    (SELECT Month, Total_revenue,
	 LAG(Total_revenue) OVER (ORDER BY Month) AS Prev_Mnt_Revenue,
	 CASE WHEN LAG(Total_Revenue) OVER (ORDER BY Month) IS NULL THEN 0
	 ELSE ROUND(((Total_revenue - LAG(Total_Revenue) OVER (ORDER BY Month)) * 100)/LAG(Total_Revenue) OVER (ORDER BY Month),2)
	 END AS Growth_Percentage
	   
	FROM Monthly_growth
	GROUP BY Month, Total_revenue)
	SELECT Month, Total_revenue, Prev_Mnt_Revenue,
	     Growth_Percentage
FROM Revenue_growth
GROUP BY Month, Total_revenue, Prev_Mnt_Revenue, Growth_Percentage
ORDER BY Month


--WHICH AGE GROUP HAS THE HIGHEST SPENDING

SELECT 
CASE WHEN Age BETWEEN '18' AND '25' THEN '18-25'
WHEN Age BETWEEN '26' AND '35' THEN '26-35'
WHEN Age BETWEEN '36' AND '45' THEN '36-45'
WHEN Age BETWEEN '46' AND '55' THEN '46-55'
ELSE '56+'
END AS Age_group, ROUND(SUM(price),2) AS Total_Spending
FROM customer_shopping_data
  GROUP BY CASE WHEN Age BETWEEN '18' AND '25' THEN '18-25'
WHEN Age BETWEEN '26' AND '35' THEN '26-35'
WHEN Age BETWEEN '36' AND '45' THEN '36-45'
WHEN Age BETWEEN '46' AND '55' THEN '46-55'
ELSE '56+'
END
  ORDER BY Total_Spending DESC

  --RELATIONSHIP BETWEEN GENDER AND PREFERED PRODUCT CATEGORIES

  SELECT gender, category, COUNT(*) AS transaction_count,
  ROUND(SUM(price),2) AS Total_spending
  FROM customer_shopping_data
  GROUP BY gender, category
  ORDER BY gender, Total_spending

  --GENDER DISTRIBUTION ACROSS DIFFERENT PRODUCT CATEGORIES

  SELECT category, gender, COUNT(*) AS Transaction_count,
  ROUND((COUNT(*)*100)/SUM(COUNT(*)) OVER (PARTITION BY category),2) AS Percentage
  FROM customer_shopping_data
  GROUP BY category, gender
  ORDER BY category, Percentage


  --AVERAGE SPENDING VARIATION BY GENDER

  SELECT gender, ROUND(AVG(price),2) AS Avg_spending
  FROM customer_shopping_data
  GROUP BY gender
    
	